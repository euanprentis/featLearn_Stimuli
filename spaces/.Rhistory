min_AIC   <- this_AIC
best_beta <- b
}
}
}
return(tibble(AIC      = min_AIC,
fit_beta = best_beta))
}
get_best_model <- function(this_data) {
# Initialise dataframe for model comparison
model_AICs <- tibble(model       = c('point', 'feature', 'category', 'point', 'feature', 'category'),
model_class = c('standard', 'standard', 'standard', 'softmax', 'softmax', 'softmax'),
AIC         = NA,
fit_beta    = NA)
# Fit "standard" logistic regression models
point_model      <- glm(correct ~ relative_point_x    + relative_point_y,    data = this_data, family = binomial(link="logit"))
feature_model    <- glm(correct ~ relative_feature_x  + relative_feature_y,  data = this_data, family = binomial(link="logit"))
category_model   <- glm(correct ~ relative_category_x + relative_category_y, data = this_data, family = binomial(link="logit"))
model_AICs$AIC[1]      <- AIC(point_model)
model_AICs$AIC[2]      <- AIC(feature_model)
model_AICs$AIC[3]      <- AIC(category_model)
model_AICs$fit_beta[1] <- NA
model_AICs$fit_beta[2] <- NA
model_AICs$fit_beta[3] <- NA
# Fit "softmax" logistic regression models
point_model    <- fit_softmax(this_data, 'function')
feature_model  <- fit_softmax(this_data, 'feature')
category_model <- fit_softmax(this_data, 'category')
model_AICs$AIC[4]      <- point_model$AIC
model_AICs$AIC[5]      <- feature_model$AIC
model_AICs$AIC[6]      <- category_model$AIC
model_AICs$fit_beta[4] <- point_model$fit_beta
model_AICs$fit_beta[5] <- feature_model$fit_beta
model_AICs$fit_beta[6] <- category_model$fit_beta
# Get difference in AIC between best fitting model and all other models
model_AICs$AICi_minus_AICmin      <- model_AICs$AIC - min(model_AICs$AIC)
model_AICs$AICi_minus_AICmin_stnd <- NA
model_AICs$AICi_minus_AICmin_soft <- NA
# Comparison across all models
if (any(model_AICs$AICi_minus_AICmin > 0 & model_AICs$AICi_minus_AICmin < 2) | sum(model_AICs$AICi_minus_AICmin==0) > 1) { # If difference in AIC < 2, no best fit ('uncertain')
best_fit <- 'uncertain'
} else {
best_fit <- paste(model_AICs$model[model_AICs$AICi_minus_AICmin==0], model_AICs$model_class[model_AICs$AICi_minus_AICmin==0], sep='_')
}
# Comparison within standard models
idx <- model_AICs$model_class == 'standard'
model_AICs$AICi_minus_AICmin_stnd[idx] <- model_AICs$AIC[idx] - min(model_AICs$AIC[idx])
if (any(model_AICs$AICi_minus_AICmin_stnd[idx] > 0 & model_AICs$AICi_minus_AICmin_stnd[idx] < 2, na.rm=TRUE) | sum(model_AICs$AICi_minus_AICmin_stnd[idx]==0, na.rm=TRUE)>1) {
best_standard_fit <- 'uncertain'
} else {
best_standard_fit <- model_AICs$model[model_AICs$AICi_minus_AICmin_stnd == 0 & !is.na(model_AICs$AICi_minus_AICmin_stnd)]
}
# Comparison within softmax models
idx <- model_AICs$model_class == 'softmax'
model_AICs$AICi_minus_AICmin_soft[idx] <- model_AICs$AIC[idx] - min(model_AICs$AIC[idx])
if (any(model_AICs$AICi_minus_AICmin_soft[idx] > 0 & model_AICs$AICi_minus_AICmin_soft[idx] < 2, na.rm=TRUE) | sum(model_AICs$AICi_minus_AICmin_soft[idx]==0, na.rm=TRUE)>1) {
best_softmax_fit  <- 'uncertain'
best_softmax_beta <- NA
} else {
best_softmax_fit  <- model_AICs$model[model_AICs$AICi_minus_AICmin_soft == 0 & !is.na(model_AICs$AICi_minus_AICmin_soft)]
best_softmax_beta <- model_AICs$fit_beta[model_AICs$AICi_minus_AICmin_soft == 0 & !is.na(model_AICs$AICi_minus_AICmin_soft)]
}
return(tibble(best_fit          = best_fit,
best_standard_fit = best_standard_fit,
best_softmax_fit  = best_softmax_fit,
best_softmax_beta = best_softmax_beta))
}
### Load stimulus spaces and randomly create trial orders ###
setwd(paste(proj_path, 'task_stimuli/spaces', sep='/'))
spaces <- list.files() # get spaces
####################### ALIGN SUBSPACES BETWEEN CLUSTER MEMEBRSHIP AND ALL DATA ###########
for (space in spaces) {
subspaces <- list.files(space, pattern="*.csv")
if (space == 'test') {
next
}
# order subspaces to align with cluster membership data
idx <-  subspaces
for (subspace in 1:length(subspaces)) {
idx[subspace] <- gsub("[^0-9.-]", "", gsub("D1", "", idx[subspace]))
}
idx <- order(as.numeric(idx))
subspaces <- rev(subspaces[idx])
# Import selected subspace
for (subspace in 1:length(subspaces)) {
for (phase in c('training', 'test')) {
# Load data
if (phase == 'training') {
fname <- paste(proj_path, "task_stimuli/spaces", space, subspaces[subspace], sep="/")
} else {
fname <- paste(proj_path, "task_stimuli/spaces/test/test.csv", sep="/")
}
# load stimulus space
stim          <- read.csv(fname, header=FALSE)
names(stim)   <- c('X','Y')
# Get basic trial / stim info
n_stim   <- nrow(stim)
n_trials <- n_combs(n_stim)
# initialise dataframe if first file is being loaded
file_data <- tibble(space    = rep(NA, n_trials),
phase    = rep(NA, n_trials),
subspace = rep(NA, n_trials),
trial    = rep(NA, n_trials),
stim_0_x = rep(NA, n_trials),
stim_0_y = rep(NA, n_trials),
stim_1_x = rep(NA, n_trials),
stim_1_y = rep(NA, n_trials))
# get trials
trial = 0
for (i in 1:n_stim) {
for (j in 1:n_stim) {
if (j > i) {
trial = trial + 1
file_data$trial           <- trial
file_data$phase           <- phase
file_data$space[trial]    <- space
file_data$subspace[trial] <- subspace
# randomise stim 0, 1 mapping
if (runif(1) < 0.5) {
file_data$stim_0_x[trial] <- stim$X[i]
file_data$stim_0_y[trial] <- stim$Y[i]
file_data$stim_1_x[trial] <- stim$X[j]
file_data$stim_1_y[trial] <- stim$Y[j]
} else {
file_data$stim_0_x[trial] <- stim$X[j]
file_data$stim_0_y[trial] <- stim$Y[j]
file_data$stim_1_x[trial] <- stim$X[i]
file_data$stim_1_y[trial] <- stim$Y[i]
}
}
}
}
# randomize trial order
rand_perm <- sample(nrow(file_data))
file_data <- file_data[rand_perm, ]
# create new datafram if first file is being loaded
if (!exists('all_data')) {
all_data <- file_data
} else {
all_data  <- bind_rows(all_data, file_data)
}
}
}
}
# Load training space cluster centers
data_path                     <- paste(proj_path, 'data', sep='/')
training_cluster_membership   <- read.csv(paste(data_path, version, 'training_cluster_membership.csv', sep="/"))
test_cluster_membership       <- read.csv(paste(data_path, version, 'test_cluster_membership.csv', sep="/"))
# Add stim IDs to cluster membership infomration
training_cluster_membership$stim_id <- 1:nrow(training_cluster_membership)
test_cluster_membership$stim_id     <- 1:nrow(test_cluster_membership)
### add stimulus IDs to all_data
# Re-format columns for comparisons between clustering and data tables
training_cluster_membership$space <- as.character(training_cluster_membership$space)
test_cluster_membership$space     <- as.character(test_cluster_membership$space)
all_data$space                    <- as.character(all_data$space)
# initialize columns
all_data$stim_0_id <- NA # left stimulus ID for subspace
all_data$stim_1_id <- NA # right stimulus ID for subspace
# Find stimulus ID from clustering
for (i in 1:nrow(all_data)) {
if (all_data$phase[i] == 'training') {
idx <- (training_cluster_membership$space    == all_data$space[i]) &
(training_cluster_membership$subspace == all_data$subspace[i])
all_data$stim_0_id[i] <- training_cluster_membership$stim_id[(all_data$stim_0_x[i]  == training_cluster_membership[, c('point_x')]) &
(all_data$stim_0_y[i]  == training_cluster_membership[, c('point_y')]) &
idx]
all_data$stim_1_id[i] <- training_cluster_membership$stim_id[(all_data$stim_1_x[i]  == training_cluster_membership[, c('point_x')]) &
(all_data$stim_1_y[i]  == training_cluster_membership[, c('point_y')]) &
idx]
} else {
idx <- (test_cluster_membership$space    == all_data$space[i]) &
(test_cluster_membership$subspace == all_data$subspace[i])
all_data$stim_0_id[i] <- test_cluster_membership$stim_id[(all_data$stim_0_x[i]  == test_cluster_membership[, c('point_x')]) &
(all_data$stim_0_y[i]  == test_cluster_membership[, c('point_y')]) &
idx]
all_data$stim_1_id[i] <- test_cluster_membership$stim_id[(all_data$stim_1_x[i]  == test_cluster_membership[, c('point_x')]) &
(all_data$stim_1_y[i]  == test_cluster_membership[, c('point_y')]) &
idx]
}
}
### Add clustering information to all_data
## initalize columns
# XY cluster ID
all_data$stim_0_XYclust_id <- NA
all_data$stim_1_XYclust_id <- NA
# XY cluster-center x position
all_data$stim_0_XYclust_center_x <- NA
all_data$stim_1_XYclust_center_x <- NA
# XY cluster-center y position
all_data$stim_0_XYclust_center_y <- NA
all_data$stim_1_XYclust_center_y <- NA
# Distance from point to XY cluster-center along x-axis
all_data$stim_0_XYclust_dist_x <- NA
all_data$stim_1_XYclust_dist_x <- NA
# Distance from point to XY cluster-center along y-axis
all_data$stim_0_XYclust_dist_y <- NA
all_data$stim_1_XYclust_dist_y <- NA
# Distance from point to XY cluster-center along xy
all_data$stim_0_XYclust_dist_xy <- NA
all_data$stim_1_XYclust_dist_xy <- NA
# X cluster ID
all_data$stim_0_Xclust_id <- NA
all_data$stim_1_Xclust_id <- NA
# X cluster-center position
all_data$stim_0_Xclust_center <- NA
all_data$stim_1_Xclust_center <- NA
# Distance from point to X cluster-center
all_data$stim_0_Xclust_dist <- NA
all_data$stim_1_Xclust_dist <- NA
# Y cluster ID
all_data$stim_0_Yclust_id <- NA
all_data$stim_1_Yclust_id <- NA
# Y cluster-center position
all_data$stim_0_Yclust_center <- NA
all_data$stim_1_Yclust_center <- NA
# Distance from point to Y cluster-center
all_data$stim_0_Yclust_dist <- NA
all_data$stim_1_Yclust_dist <- NA
## Assign clustering info to training and test trials
# training
idx <- all_data$phase == 'training'
all_data$stim_0_XYclust_id[idx]       <- training_cluster_membership$XYclust_id[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_id[idx]       <- training_cluster_membership$XYclust_id[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_center_x[idx] <- training_cluster_membership$XYclust_center_x[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_center_x[idx] <- training_cluster_membership$XYclust_center_x[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_center_y[idx] <- training_cluster_membership$XYclust_center_y[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_center_y[idx] <- training_cluster_membership$XYclust_center_y[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_dist_x[idx]   <- training_cluster_membership$XYclust_dist_x[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_dist_x[idx]   <- training_cluster_membership$XYclust_dist_x[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_dist_y[idx]   <- training_cluster_membership$XYclust_dist_y[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_dist_y[idx]   <- training_cluster_membership$XYclust_dist_y[all_data$stim_1_id[idx]]####
all_data$stim_0_XYclust_dist_xy[idx]  <- training_cluster_membership$XYclust_dist_xy[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_dist_xy[idx]  <- training_cluster_membership$XYclust_dist_xy[all_data$stim_1_id[idx]]
all_data$stim_0_Xclust_id[idx]        <- training_cluster_membership$Xclust_id[all_data$stim_0_id[idx]]
all_data$stim_1_Xclust_id[idx]        <- training_cluster_membership$Xclust_id[all_data$stim_1_id[idx]]
all_data$stim_0_Xclust_center[idx]    <- training_cluster_membership$Xclust_center[all_data$stim_0_id[idx]]
all_data$stim_1_Xclust_center[idx]    <- training_cluster_membership$Xclust_center[all_data$stim_1_id[idx]]
all_data$stim_0_Xclust_dist[idx]      <- training_cluster_membership$Xclust_dist[all_data$stim_0_id[idx]]
all_data$stim_1_Xclust_dist[idx]      <- training_cluster_membership$Xclust_dist[all_data$stim_1_id[idx]]
all_data$stim_0_Yclust_id[idx]        <- training_cluster_membership$Yclust_id[all_data$stim_0_id[idx]]
all_data$stim_1_Yclust_id[idx]        <- training_cluster_membership$Yclust_id[all_data$stim_1_id[idx]]
all_data$stim_0_Yclust_center[idx]    <- training_cluster_membership$Yclust_center[all_data$stim_0_id[idx]]
all_data$stim_1_Yclust_center[idx]    <- training_cluster_membership$Yclust_center[all_data$stim_1_id[idx]]
all_data$stim_0_Yclust_dist[idx]      <- training_cluster_membership$Yclust_dist[all_data$stim_0_id[idx]]
all_data$stim_1_Yclust_dist[idx]      <- training_cluster_membership$Yclust_dist[all_data$stim_1_id[idx]]
# test
idx <- all_data$phase == 'test'
all_data$stim_0_XYclust_id[idx]       <- test_cluster_membership$XYclust_id[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_id[idx]       <- test_cluster_membership$XYclust_id[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_center_x[idx] <- test_cluster_membership$XYclust_center_x[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_center_x[idx] <- test_cluster_membership$XYclust_center_x[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_center_y[idx] <- test_cluster_membership$XYclust_center_y[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_center_y[idx] <- test_cluster_membership$XYclust_center_y[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_dist_x[idx]   <- test_cluster_membership$XYclust_dist_x[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_dist_x[idx]   <- test_cluster_membership$XYclust_dist_x[all_data$stim_1_id[idx]]
all_data$stim_0_XYclust_dist_y[idx]   <- test_cluster_membership$XYclust_dist_y[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_dist_y[idx]   <- test_cluster_membership$XYclust_dist_y[all_data$stim_1_id[idx]]####
all_data$stim_0_XYclust_dist_xy[idx]  <- test_cluster_membership$XYclust_dist_xy[all_data$stim_0_id[idx]]
all_data$stim_1_XYclust_dist_xy[idx]  <- test_cluster_membership$XYclust_dist_xy[all_data$stim_1_id[idx]]
all_data$stim_0_Xclust_id[idx]        <- test_cluster_membership$Xclust_id[all_data$stim_0_id[idx]]
all_data$stim_1_Xclust_id[idx]        <- test_cluster_membership$Xclust_id[all_data$stim_1_id[idx]]
all_data$stim_0_Xclust_center[idx]    <- test_cluster_membership$Xclust_center[all_data$stim_0_id[idx]]
all_data$stim_1_Xclust_center[idx]    <- test_cluster_membership$Xclust_center[all_data$stim_1_id[idx]]
all_data$stim_0_Xclust_dist[idx]      <- test_cluster_membership$Xclust_dist[all_data$stim_0_id[idx]]
all_data$stim_1_Xclust_dist[idx]      <- test_cluster_membership$Xclust_dist[all_data$stim_1_id[idx]]
all_data$stim_0_Yclust_id[idx]        <- test_cluster_membership$Yclust_id[all_data$stim_0_id[idx]]
all_data$stim_1_Yclust_id[idx]        <- test_cluster_membership$Yclust_id[all_data$stim_1_id[idx]]
all_data$stim_0_Yclust_center[idx]    <- test_cluster_membership$Yclust_center[all_data$stim_0_id[idx]]
all_data$stim_1_Yclust_center[idx]    <- test_cluster_membership$Yclust_center[all_data$stim_1_id[idx]]
all_data$stim_0_Yclust_dist[idx]      <- test_cluster_membership$Yclust_dist[all_data$stim_0_id[idx]]
all_data$stim_1_Yclust_dist[idx]      <- test_cluster_membership$Yclust_dist[all_data$stim_1_id[idx]]
### Get value of stim 1 relative to stim 0
# value is based on point difference (function learner)
all_data$relative_point_x <- abs(all_data$stim_1_x - all_data$stim_0_x)
all_data$relative_point_y <- abs(all_data$stim_1_y - all_data$stim_0_y)
# value is based on feature difference (feature-based learner)
all_data$relative_feature_x <- abs(all_data$stim_1_Xclust_center - all_data$stim_0_Xclust_center)
all_data$relative_feature_y <- abs(all_data$stim_1_Yclust_center - all_data$stim_0_Yclust_center)
# value is based on 2D category difference (category-based learner)
all_data$relative_category_x <- abs(all_data$stim_1_XYclust_center_x - all_data$stim_0_XYclust_center_x)
all_data$relative_category_y <- abs(all_data$stim_1_XYclust_center_y - all_data$stim_0_XYclust_center_y)
all_data <- all_data %>% mutate_at(c('stim_0_x',
'stim_1_x',
'stim_0_y',
'stim_1_y',
'stim_0_XYclust_center_x',
'stim_1_XYclust_center_x',
'stim_0_XYclust_center_y',
'stim_1_XYclust_center_y',
'stim_0_Xclust_center',
'stim_1_Xclust_center',
'stim_0_Yclust_center',
'stim_1_Yclust_center',
'stim_0_XYclust_dist_xy',
'stim_1_XYclust_dist_xy',
'stim_0_Xclust_dist',
'stim_1_Xclust_dist',
'stim_0_Yclust_dist',
'stim_1_Yclust_dist',
'relative_point_x',
'relative_point_y',
'relative_feature_x',
'relative_feature_y',
'relative_category_x',
'relative_category_y'
), function(x) {x/180})
### Simulations ###
# Sim choices (deterministic)
betas  <- seq(from=min_beta,  to=max_beta,  by=beta_increment)
alphas <- seq(from=min_alpha, to=max_alpha, by=alpha_increment)
gammas  <- seq(from=min_gamma, to=max_gamma, by=gamma_increment)
counter = 0
for (beta in betas) {
#for (alpha in alphas) {
# for (gamma in gammas) {
for (space in unique(all_data$space)) {
for (subspace in 1:5) {
# Get training trials for space & subspace
idx <- all_data$space == space & all_data$subspace == subspace
# initialise each agent
sim_func     <- all_data[idx,]
sim_feat     <- all_data[idx,]
sim_catg     <- all_data[idx,]
#sim_featGrad <- all_data[idx,]
#sim_catgGrad <- all_data[idx,]
sim_random   <- all_data[idx,]
### softmax function, to get probaility of right choice
# STANDARD: p(right) = exp(val_1/beta) / (exp(val_1/beta) + exp(val_0/beta))
sim_func$p1_func <- exp(sim_func$stim_1_x/beta)                / (exp(sim_func$stim_1_x/beta)                + exp(sim_func$stim_0_x/beta))
sim_func$p1_feat <- exp(sim_func$stim_1_Xclust_center/beta)    / (exp(sim_func$stim_1_Xclust_center/beta)    + exp(sim_func$stim_0_Xclust_center/beta))
sim_func$p1_catg <- exp(sim_func$stim_1_XYclust_center_x/beta) / (exp(sim_func$stim_1_XYclust_center_x/beta) + exp(sim_func$stim_0_XYclust_center_x/beta))
sim_feat$p1_func <- exp(sim_feat$stim_1_x/beta)                / (exp(sim_feat$stim_1_x/beta)                + exp(sim_feat$stim_0_x/beta))
sim_feat$p1_feat <- exp(sim_feat$stim_1_Xclust_center/beta)    / (exp(sim_feat$stim_1_Xclust_center/beta)    + exp(sim_feat$stim_0_Xclust_center/beta))
sim_feat$p1_catg <- exp(sim_feat$stim_1_XYclust_center_x/beta) / (exp(sim_feat$stim_1_XYclust_center_x/beta) + exp(sim_feat$stim_0_XYclust_center_x/beta))
sim_catg$p1_func <- exp(sim_catg$stim_1_x/beta)                / (exp(sim_catg$stim_1_x/beta)                + exp(sim_catg$stim_0_x/beta))
sim_catg$p1_feat <- exp(sim_catg$stim_1_Xclust_center/beta)    / (exp(sim_catg$stim_1_Xclust_center/beta)    + exp(sim_catg$stim_0_Xclust_center/beta))
sim_catg$p1_catg <- exp(sim_catg$stim_1_XYclust_center_x/beta) / (exp(sim_catg$stim_1_XYclust_center_x/beta) + exp(sim_catg$stim_0_XYclust_center_x/beta))
sim_random$p1_func <- exp(sim_random$stim_1_x/beta)                / (exp(sim_random$stim_1_x/beta)                + exp(sim_random$stim_0_x/beta))
sim_random$p1_feat <- exp(sim_random$stim_1_Xclust_center/beta)    / (exp(sim_random$stim_1_Xclust_center/beta)    + exp(sim_random$stim_0_Xclust_center/beta))
sim_random$p1_catg <- exp(sim_random$stim_1_XYclust_center_x/beta) / (exp(sim_random$stim_1_XYclust_center_x/beta) + exp(sim_random$stim_0_XYclust_center_x/beta))
sim_func$p1 <- sim_func$p1_func
sim_feat$p1 <- sim_feat$p1_feat
sim_catg$p1 <- sim_catg$p1_catg
sim_random$p1 <- runif(length(sim_random$stim_1_x))  # Random model chooses randomly (p1 is random, for regression fitting purposes. Still produces random choice)
# GRADIENT: p(right) = exp(val_1/(beta + dist_from_center)) / (exp(val_1/(beta + dist_from_center)) + exp(val_0/(beta + dist_from_center)))
#sim_featGrad$p1 <- exp(sim_featGrad$stim_1_Xclust_center/(beta + sim_featGrad$stim_1_Xclust_dist))        / (exp(sim_featGrad$stim_1_Xclust_center/(beta + sim_featGrad$stim_1_Xclust_dist))        + exp(sim_featGrad$stim_0_Xclust_center/(beta + sim_featGrad$stim_0_Xclust_dist)))
#sim_catgGrad$p1 <- exp(sim_catgGrad$stim_1_XYclust_center_x/(beta + sim_catgGrad$stim_1_XYclust_dist_xy)) / (exp(sim_catgGrad$stim_1_XYclust_center_x/(beta + sim_catgGrad$stim_1_XYclust_dist_xy)) + exp(sim_catgGrad$stim_0_XYclust_center_x/(beta + sim_catgGrad$stim_0_XYclust_dist_xy)))
### Get confidence
# Get "raw" value, based on distance between stimulus values (increases confidence; weighted by alpha)
# and distance of stimulus dimension from cluster center (decreases confidencel weighted by gamma)
# sim_func$conf     <- alpha*sim_func$relative_point_x
#  sim_feat$conf     <- alpha*sim_feat$relative_feature_x      + gamma*(1 - sim_feat$stim_1_Xclust_dist + sim_feat$stim_0_Xclust_dist)
#sim_featGrad$conf <- alpha*sim_featGrad$relative_feature_x  + gamma*(1 - sim_featGrad$stim_1_Xclust_dist + sim_featGrad$stim_0_Xclust_dist)
# sim_catg$conf     <- alpha*sim_catg$relative_category_x     + gamma*(1 - sim_catg$stim_1_XYclust_dist_xy + sim_catg$stim_0_XYclust_dist_xy)
# sim_catgGrad$conf <- alpha*sim_catgGrad$relative_category_x + gamma*(1 - sim_catgGrad$stim_1_XYclust_dist_xy + sim_catgGrad$stim_0_XYclust_dist_xy)
#sim_random$conf   <- runif(length(sim_random$p1))
# Convert to ordinal
#    sim_func$conf_ord       <- get_ordinal_confidence(sim_func)
#   sim_feat$conf_ord       <- get_ordinal_confidence(sim_feat)
# sim_featGrad$conf_ord   <- get_ordinal_confidence(sim_featGrad)
#  sim_catg$conf_ord       <- get_ordinal_confidence(sim_catg)
# sim_catgGrad$conf_ord   <- get_ordinal_confidence(sim_catgGrad)
# sim_random$conf_ord     <- get_ordinal_confidence(sim_random)
# Format as factor
#     sim_func$conf_ord     <- as.factor(sim_func$conf_ord)
#    sim_feat$conf_ord     <- as.factor(sim_feat$conf_ord)
# sim_featGrad$conf_ord <- as.factor(sim_featGrad$conf_ord)
#   sim_catg$conf_ord     <- as.factor(sim_catg$conf_ord)
# sim_catgGrad$conf_ord <- as.factor(sim_catgGrad$conf_ord)
#  sim_random$conf_ord   <- as.factor(sim_random$conf_ord)
### Simulate
# initalise choice columns
sim_func$choice     <- NA
sim_feat$choice     <- NA
sim_catg$choice     <- NA
# sim_featGrad$choice <- NA
# sim_catgGrad$choice <- NA
sim_random$choice   <- NA
### Simulate choices
sim_func$choice     <- get_choices(sim_func)
sim_feat$choice     <- get_choices(sim_feat)
sim_catg$choice     <- get_choices(sim_catg)
#  sim_featGrad$choice <- get_choices(sim_featGrad)
#   sim_catgGrad$choice <- get_choices(sim_catgGrad)
sim_random$choice   <- get_choices(sim_random)
# Was choice correct?
sim_func$correct     <- get_correct(sim_func)
sim_feat$correct     <- get_correct(sim_feat)
sim_catg$correct     <- get_correct(sim_catg)
#  sim_featGrad$correct <- get_correct(sim_featGrad)
#  sim_catgGrad$correct <- get_correct(sim_catgGrad)
sim_random$correct   <- get_correct(sim_random)
# Get reward outcomes (training)
sim_func$reward[sim_func$phase == "training"]         <- get_reward(sim_func[sim_func$phase == 'training',])
sim_feat$reward[sim_feat$phase == "training"]         <- get_reward(sim_feat[sim_feat$phase == 'training',])
sim_catg$reward[sim_catg$phase == "training"]         <- get_reward(sim_catg[sim_catg$phase == 'training',])
# sim_featGrad$reward[sim_func$phase == "training"]     <- get_reward(sim_featGrad[sim_featGrad$phase == 'training',])
# sim_catgGrad$reward[sim_catgGrad$phase == "training"] <- get_reward(sim_catgGrad[sim_catgGrad$phase == 'training',])
sim_random$reward[sim_random$phase == "training"]     <- get_reward(sim_random[sim_random$phase == 'training',])
# Get reward outcomes (test - no feedback, so no rewards)
sim_func$reward[sim_func$phase == "test"]         <- 0
sim_feat$reward[sim_feat$phase == "test"]         <- 0
sim_catg$reward[sim_catg$phase == "test"]         <- 0
# sim_featGrad$reward[sim_func$phase == "test"]     <- 0
# sim_catgGrad$reward[sim_catgGrad$phase == "test"] <- 0
sim_random$reward[sim_random$phase == "test"]     <- 0
# Get reward histories (history per subject)
sim_func$reward_hist     <- get_reward_hist(sim_func, 'function')
sim_feat$reward_hist     <- get_reward_hist(sim_feat, 'feature')
sim_catg$reward_hist     <- get_reward_hist(sim_catg, 'category')
#  sim_featGrad$reward_hist <- get_reward_hist(sim_featGrad, 'feature')
# sim_catgGrad$reward_hist <- get_reward_hist(sim_catgGrad, 'category')
sim_random$reward_hist   <- get_reward_hist(sim_random, 'function')
### Fit models
fit_sim_func_train <- get_best_model(sim_func[sim_func$phase == 'training',])
fit_sim_feat_train <- get_best_model(sim_func[sim_func$phase == 'training',])
fit_sim_catg_train <- get_best_model(sim_func[sim_func$phase == 'training',])
fit_sim_rand_train <- get_best_model(sim_func[sim_func$phase == 'training',])
fit_sim_func_test  <- get_best_model(sim_func[sim_func$phase == 'test',])
fit_sim_feat_test  <- get_best_model(sim_func[sim_func$phase == 'test',])
fit_sim_catg_test  <- get_best_model(sim_func[sim_func$phase == 'test',])
fit_sim_rand_test  <- get_best_model(sim_func[sim_func$phase == 'test',])
### Logistic regression
# Fit models to simulated function choices
this_model_fit <- tibble(space     = rep(space, 8),
subspace  = rep(subspace, 8),
n_x_feats = length(unique(sim_func$stim_0_Xclust_id)),
n_x_catgs = length(unique(sim_func$stim_0_XYclust_id)),
beta      = beta,
phase     = rep(c('training', 'test'), each = 4),
model     = rep(c('function', 'feature', 'category', 'random'), 2),
p_correct          = c(get_p_correct(sim_func,     'training'),
get_p_correct(sim_feat,     'training'),
get_p_correct(sim_catg,     'training'),
get_p_correct(sim_random,   'training'),
get_p_correct(sim_func,     'test'),
get_p_correct(sim_feat,     'test'),
get_p_correct(sim_catg,     'test'),
get_p_correct(sim_random,   'test')),
best_fit           = c(fit_sim_func_train$best_fit,
fit_sim_feat_train$best_fit,
fit_sim_catg_train$best_fit,
fit_sim_rand_train$best_fit,
fit_sim_func_test$best_fit,
fit_sim_feat_test$best_fit,
fit_sim_catg_test$best_fit,
fit_sim_rand_test$best_fit),
best_fit_standard  = c(fit_sim_func_train$best_standard_fit,
fit_sim_feat_train$best_standard_fit,
fit_sim_catg_train$best_standard_fit,
fit_sim_rand_train$best_standard_fit,
fit_sim_func_test$best_standard_fit,
fit_sim_feat_test$best_standard_fit,
fit_sim_catg_test$best_standard_fit,
fit_sim_rand_test$best_standard_fit),
best_fit_softmax   = c(fit_sim_func_train$best_softmax_fit,
fit_sim_feat_train$best_softmax_fit,
fit_sim_catg_train$best_softmax_fit,
fit_sim_rand_train$best_softmax_fit,
fit_sim_func_test$best_softmax_fit,
fit_sim_feat_test$best_softmax_fit,
fit_sim_catg_test$best_softmax_fit,
fit_sim_rand_test$best_softmax_fit),
fit_beta           = c(fit_sim_func_train$best_softmax_beta,
fit_sim_feat_train$best_softmax_beta,
fit_sim_catg_train$best_softmax_beta,
fit_sim_rand_train$best_softmax_beta,
fit_sim_func_test$best_softmax_beta,
fit_sim_feat_test$best_softmax_beta,
fit_sim_catg_test$best_softmax_beta,
fit_sim_rand_test$best_softmax_beta))
# Add to all_model_fits dataframe or, if it does not exist yet, create all_model_fits dataframe
if (!exists('all_model_fits')) {
all_model_fits  <- this_model_fit
} else {
all_model_fits  <- bind_rows(all_model_fits, this_model_fit)
}
counter = counter + 1
print(counter/(25*length(betas)))
}
}
# }
#}
}
all_model_fits$target_fit                                                                              <- NA
all_model_fits$target_fit[all_model_fits$model == 'function']                                          <- 'point'
all_model_fits$target_fit[all_model_fits$model == 'feature'  | all_model_fits$model == 'featureGrad']  <- 'feature'
all_model_fits$target_fit[all_model_fits$model == 'category' | all_model_fits$model == 'categoryGrad'] <- 'category'
all_model_fits$target_fit[all_model_fits$model == 'random']                                            <- 'random'
ggplot(all_model_fits, aes(beta, fit_beta)) +
geom_point() +
facet_wrap(~ model)
ggplot(all_model_fits, aes(beta, fit_beta, color=model)) +
geom_point() +
facet_wrap(~ model)
all_model_fits$p_correct <- all_model_fits$p_correct - 1 # quick adjustment, due to incorrect calculation in get_p_correct() (I should update function)
# which models where recovered?
all_model_fits$recovered_standard <- as.numeric(all_model_fits$best_fit_standard == all_model_fits$target_fit)
all_model_fits$recovered_softmax  <- as.numeric(all_model_fits$best_fit_softmax == all_model_fits$target_fit)
recovery_summary <- all_model_fits %>% group_by(beta, phase, model) %>% summarise(standard = sum(recovered_standard)/length(recovered_standard),
softmax  = sum(recovered_softmax)/length(recovered_softmax),
accuracy = (sum(p_correct)/length(p_correct)))
recovery_summary <- gather(recovery_summary, model_class, p_recovered, standard, softmax)
ggplot(recovery_summary, aes(p_recovered, accuracy, color=beta)) +
geom_point() +
geom_smooth(method='lm', formula= y~x, color='black') +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
scale_color_gradient(low="blue", high="red") +
facet_grid(rows = vars(model_class), cols = vars(model)) +
theme_light() +
theme(aspect.ratio = 1)
